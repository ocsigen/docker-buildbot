#! /bin/sh

set -e

DIR=$(dirname $(readlink -f $0))

RUNDIR=/var/run/ci
RUNFILE=${RUNDIR}/docker_updater.running
WAITFILE=${RUNDIR}/cache_updater.waiting

if [ -f ${RUNFILE} ]; then
  echo "File '${RUNFILE}' exists. Exiting..." 
  exit 0
fi
trap 'rm -f ${RUNFILE} ${WAITFILE}; exit 1' INT QUIT TERM
touch ${RUNFILE}

## Shameless hack : be sure the second the second jobs on this builder
## is the ''update_cache'. As the maximum number of jobs is two, this
## ensures that no jobs currently depends on docker.

while [ ! -f ${WAITFILE} ]; do
    echo "Waiting for the 'update_cache' job to terminate..."
    sleep 10
done

echo "Updating docker context..."
cp -a /builds/cache/{git,opam-repository}.tar ${DOCKERDIR}/cache
cp -a /builds/.ssh/id_rsa{,.pub} ${DOCKERDIR}/ssh

echo "Launching updater..."
${DIR}/update_docker ${DIR}/../docker

cp ${DIR}/bin/build /usr/local/build

rm ${WAITFILE}
rm ${RUNFILE}
